. configs/assign_vars.cfg


function userPrompt() {
    read -r -p "Press [Enter] to continue"
    #clear
}


function check_if_local_location_exists() {

    [ -d "${1}" ] && echo -e "The ${1} directory EXISTS\v" || echo "location doesn't exist"
}

# This was in my intial tests... this shouldn't be used this way
# somehow/where check_if_local_location_exists should be passed a ${1}
function check_if_config_locations_exist() {

    # Browsers
    check_if_local_location_exists "${librewolf_configs}"
    check_if_local_location_exists "${mullvad_configs}"
    check_if_local_location_exists "${thorium_configs}"
    check_if_local_location_exists "${ungoogled_chromium_configs}"

    check_if_local_location_exists "${bitwarden_configs}"
    check_if_local_location_exists "${freetube_configs}"
    check_if_local_location_exists "${keepassxc_configs}"
}

function display_config_location() {
    echo -e "1:\t${1}"

    echo -e "${program_name}'s config location is: ${1}"
}

function unset_vars() {
    # test cleanup
    unset program_name
    #echo -e "${program_name} - should be blank/null here"
}

function handle_configs() {
    # question: will this work one by one?
    # idea: check if local_location of each config (hard coded) exists and if so (that is the idea), pass to backup_local_configs
    check_if_local_location_exists ${1} && backup_local_config ${1}

    display_config_location ${1}
    unset_vars
}

function check_free_space() {
    # check for free space first
    echo -e "Checking for free space, to make sure there is enough for the backup"
}

# Compress all of the configs into a single archive
function compress_backup_location () {

    #check_free_space

    compress_config_content="tar czvf ${users_home}/config_backup.tar.gz ${appimage_config_backup_location}"

    userPrompt

    # idea: append if file already exists maybe?
    [ ! -f ${compressed_config_backups_archive} ] && echo -e "About to compress archive" || echo -e "Deleting existing ${compressed_config_backups_archive}" || rm -iv ${compressed_config_backups_archive}

    ${compress_config_content} && echo "done"

}


# goal: just to backup local configs to the backup "directory"
function backup_local_config() {

    # debugging
    echo -e "in backup_local_config function now"


    # bad place but move later
    # issue: this runs each time ... it should run once and that's it
    assign_appimage_config_backup_location

    # debugging output
    # echo -e "debugging, this shoulo be the local config for each item\t1:\t${1}"
    # userPrompt

    # check_if_config_locations_exist
    echo -e "About to sync ${program_name} configs to backup location" && rsync -av ${1} ${appimage_config_backup_location}

    # old way below
    #cp -r ${1} ${appimage_config_backup_location}

}
